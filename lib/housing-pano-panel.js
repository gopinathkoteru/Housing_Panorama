/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var adjust, animate, back_pano, camera, change_pano, container, front_pano, init, path, renderer, root, scene, slider, texture_placeholder, update;

	  root = __webpack_require__(1);

	  front_pano = void 0;

	  back_pano = void 0;

	  path = "../test/Dataset/panos-house/";

	  root.Config = {
	    img_name: ['r', 'l', 'u', 'd', 'f', 'b'],
	    webgl: true,
	    lon: 0,
	    lat: 0
	  };

	  container = $("#container");

	  scene = new THREE.Scene;

	  texture_placeholder = $('<canvas/>').width(128).height(128);

	  renderer = new THREE.WebGLRenderer;

	  renderer.setPixelRatio(window.devicePixelRatio);

	  container.append(renderer.domElement);

	  renderer.setSize(container.outerWidth(), container.outerHeight());

	  camera = new THREE.PerspectiveCamera(65, container.outerWidth() / container.outerHeight(), 1, 1100);

	  camera.target = new THREE.Vector3(0, 0, 0);

	  animate = function() {
	    requestAnimationFrame(animate);
	    if (root.Config.target !== void 0 && root.Config.current !== void 0 && Math.abs(root.Config.target - root.Config.current) > 0.1) {
	      root.Config.current = root.Config.current + (root.Config.target - root.Config.current) * 0.15;
	      root.Config.lon = (root.Config.current + 360) % 360;
	    }
	    update();
	  };

	  update = function() {
	    var phi, theta;
	    phi = THREE.Math.degToRad(90 - root.Config.lat);
	    theta = THREE.Math.degToRad(root.Config.lon);
	    camera.target.x = 500 * Math.sin(phi) * Math.cos(theta);
	    camera.target.y = 500 * Math.cos(phi);
	    camera.target.z = 500 * Math.sin(phi) * Math.sin(theta);
	    camera.lookAt(camera.target);
	    renderer.render(scene, camera);
	  };

	  init = function(scrollid, num_panos) {
	    var i, test;
	    test = "";
	    i = 1;
	    while (i <= num_panos) {
	      test = test + "<option value='" + i + "'>pano" + i + "</option>";
	      i++;
	    }
	    return document.getElementById(scrollid).innerHTML = test;
	  };

	  change_pano = function(id, value) {
	    var error_value, opc;
	    opc = $("#opacity")[0].value;
	    if (id === 1) {
	      front_pano.destroy_pano();
	      front_pano = new root.Pano(value - 1, false);
	      return front_pano.create_pano(path + value + '/mobile_', opc);
	    } else {
	      back_pano.destroy_pano();
	      back_pano = new root.Pano(value - 1, false);
	      back_pano.create_pano(path + value + '/mobile_', 1 - opc);
	      error_value = $("#adjust")[0].value;
	      return back_pano.mesh.rotation.y = THREE.Math.degToRad(error_value);
	    }
	  };

	  animate();

	  init("list1", 22);

	  init("list2", 22);

	  $("#house-list").on('change', function() {
	    var count, house, house_path;
	    house = $("#house-list")[0];
	    house_path = house.options[house.selectedIndex].value;
	    path = '../test/Dataset/' + house_path + '/';
	    count = 0;
	    if (house_path === "panos-house") {
	      count = 22;
	    } else if (house_path === "panos") {
	      count = 5;
	    } else {
	      count = 4;
	    }
	    init("list1", count);
	    init("list2", count);
	    $("#list1").trigger('change');
	    $("#list2").trigger('change');
	  });

	  $("#list1").on('change', function() {
	    var list, value;
	    list = $("#list1");
	    value = list[0].options[list[0].selectedIndex].value;
	    change_pano(1, value);
	  });

	  $("#list2").on('change', function() {
	    var list, value;
	    list = $("#list2");
	    value = list[0].options[list[0].selectedIndex].value;
	    change_pano(2, value);
	  });

	  root.camera = camera;

	  root.scene = scene;

	  root.renderer = renderer;

	  root.texture_placeholder = texture_placeholder;

	  front_pano = new root.Pano(0, false);

	  front_pano.create_pano('../test/Dataset/panos-house/1/mobile_', 1);

	  back_pano = new root.Pano(0, false);

	  back_pano.create_pano('../test/Dataset/panos-house/1/mobile_', 0);

	  slider = $("#opacity");

	  slider.on('change mousemove', function() {
	    var i, opacity, value;
	    opacity = slider[0].value;
	    value = $("#display");
	    value.html(opacity);
	    i = 0;
	    while (i < 6) {
	      front_pano.mesh.material.materials[i].opacity = opacity;
	      back_pano.mesh.material.materials[i].opacity = 1 - opacity;
	      i++;
	    }
	  });

	  adjust = $("#adjust");

	  adjust.on('change mousemove', function() {
	    var error, error_value;
	    error_value = adjust[0].value;
	    error = $("#error");
	    error.html(error_value);
	    back_pano.mesh.rotation.y = THREE.Math.degToRad(error_value);
	  });

	  root.add_listeners();

	  module.exports = root;

	}).call(this);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var add_listeners, onPointerDownLat, onPointerDownLon, onPointerDownPointerX, onPointerDownPointerY, on_key_down, on_key_up, on_mouse_down, on_mouse_move, on_mouse_up, on_mouse_wheel, remove_listeners, root;

	  root = __webpack_require__(2);

	  onPointerDownPointerX = void 0;

	  onPointerDownPointerY = void 0;

	  onPointerDownLon = void 0;

	  onPointerDownLat = void 0;

	  on_mouse_down = function(event) {
	    event.preventDefault();
	    root.Config.isUserInteracting = true;
	    onPointerDownPointerX = event.clientX;
	    onPointerDownPointerY = event.clientY;
	    onPointerDownLon = root.Config.lon;
	    onPointerDownLat = root.Config.lat;
	  };

	  on_mouse_move = function(event) {
	    var mouseSpeed;
	    if (root.Config.isUserInteracting === true) {
	      mouseSpeed = 0.3;
	      root.Config.lon = (onPointerDownPointerX - event.clientX) * mouseSpeed + onPointerDownLon;
	      root.Config.lat = (event.clientY - onPointerDownPointerY) * mouseSpeed + onPointerDownLat;
	    }
	  };

	  on_mouse_up = function(event) {
	    root.Config.isUserInteracting = false;
	    root.Config.stop_time = Date.now();
	    root.Config.autoplay = false;
	  };

	  on_mouse_wheel = function(event) {
	    if (event.wheelDeltaY) {
	      root.camera.fov -= event.wheelDeltaY * 0.05;
	    } else if (event.wheelDelta) {
	      root.camera.fov -= event.wheelDelta * 0.05;
	    } else if (event.detail) {
	      root.camera.fov += event.detail * 1.0;
	    }
	    root.camera.fov = Math.max(60, Math.min(90, root.camera.fov));
	    root.camera.updateProjectionMatrix();
	  };

	  on_key_down = function(event) {
	    var keyPressed, near_id;
	    near_id = void 0;
	    if (!event) {
	      event = window.event;
	    }
	    root.Config.isUserInteracting = true;
	    keyPressed = event.keyCode;
	    if (keyPressed === 37) {
	      root.Config.current = root.Config.lon;
	      root.Config.target = root.Config.lon - 20;
	    } else if (keyPressed === 39) {
	      root.Config.current = root.Config.lon;
	      root.Config.target = root.Config.lon + 20;
	    }
	  };

	  on_key_up = function(event) {
	    root.Config.isUserInteracting = false;
	    root.Config.stop_time = Date.now();
	    root.Config.autoplay = false;
	  };

	  add_listeners = function() {
	    return $("#container").on({
	      click: function(event) {
	        $("#container").focus();
	      },
	      mousedown: function(event) {
	        on_mouse_down(event);
	      },
	      mousemove: function(event) {
	        on_mouse_move(event);
	      },
	      mouseup: function(event) {
	        on_mouse_up(event);
	      },
	      mousewheel: function(event) {
	        on_mouse_wheel(event.originalEvent);
	      },
	      DOMMouseScroll: function(event) {
	        on_mouse_wheel(event.originalEvent);
	      },
	      keydown: function(event) {
	        on_key_down(event);
	      },
	      keyup: function(event) {
	        on_key_up(event);
	      }
	    });
	  };

	  remove_listeners = function() {
	    $("#container").off();
	  };

	  root.add_listeners = add_listeners;

	  root.remove_listeners = remove_listeners;

	  module.exports = root;

	}).call(this);


/***/ },
/* 2 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var Pano, root;

	  root = {};

	  Pano = (function() {
	    function Pano(pano_id1, is_blur) {
	      this.pano_id = pano_id1;
	      this.is_blur = is_blur;
	      this.name = "panorama";
	      this.destroy = false;
	    }

	    Pano.prototype.create_pano = function(path, opacity) {
	      var geometry, i, materials;
	      materials = [];
	      i = 0;
	      while (i < 6) {
	        materials.push(this.load_texture(path + root.Config.img_name[i] + ".jpg", i));
	        i++;
	      }
	      geometry = root.Config.webgl ? new THREE.BoxGeometry(300, 300, 300, 7, 7, 7) : new THREE.BoxGeometry(300, 300, 300, 20, 20, 20);
	      this.mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(materials));
	      this.mesh.scale.x = -1;
	      i = 0;
	      while (i < 6) {
	        this.mesh.material.materials[i].transparent = true;
	        this.mesh.material.materials[i].opacity = opacity;
	        i++;
	      }
	      root.scene.add(this.mesh);
	    };

	    Pano.prototype.destroy_pano = function() {
	      var i;
	      this.destroy = true;
	      root.scene.remove(this.mesh);
	      i = 0;
	      while (i < 6) {
	        this.mesh.material.materials[i].map.dispose();
	        this.mesh.material.materials[i].dispose();
	        i++;
	      }
	      return this.mesh.geometry.dispose();
	    };

	    Pano.prototype.load_texture = function(path, image_index) {
	      var image, material, pano_id, texture;
	      texture = new THREE.Texture(root.texture_placeholder);
	      material = new THREE.MeshBasicMaterial({
	        map: texture,
	        overdraw: 0,
	        side: THREE.DoubleSide,
	        blending: THREE.AdditiveBlending,
	        depthTest: false
	      });
	      pano_id = this.pano_id;
	      image = new Image();
	      image.onload = function() {
	        image.onload = null;
	        texture.image = this;
	        texture.needsUpdate = true;
	      };
	      image.src = path;
	      return material;
	    };

	    return Pano;

	  })();

	  root.Pano = Pano;

	  module.exports = root;

	}).call(this);


/***/ }
/******/ ]);