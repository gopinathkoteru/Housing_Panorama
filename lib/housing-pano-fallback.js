/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var container, div, div1, div2, flag, root;

	  root = __webpack_require__(1);

	  flag = false;

	  (function($) {
	    $.fn.dragabble = function(opt) {
	      var $el;
	      var $el, set_x;
	      opt = $.extend({
	        handle: '',
	        cursor: 'move'
	      }, opt);
	      if (opt.handle === '') {
	        $el = this;
	      } else {
	        $el = this.find(opt.handle);
	      }
	      set_x = void 0;
	      return $el.css('cursor', opt.cursor).on('mousedown', function(e) {
	        var $drag;
	        flag = true;
	        $drag = $el;
	        set_x = e.pageX;
	        e.preventDefault();
	      }).on('mousemove', function(e) {
	        var g, keypress, p, q;
	        if (flag === true) {
	          g = $(this).offset().left + (e.pageX - set_x) * 0.05;
	          keypress = void 0;
	          if (e.pageX > set_x) {
	            keypress = 1;
	          } else {
	            keypress = 2;
	          }
	          $(this).offset({
	            left: g
	          });
	          p = Math.floor($('#drag').offset().left);
	          if (keypress === 1) {
	            if (Math.abs(p) % 1500 <= 100) {
	              if (Math.abs(p) % 3000 <= 100) {
	                q = $('#screen1').offset().left - p;
	                $('#screen2').offset({
	                  left: q - 1500 + p
	                });
	              } else {
	                q = $('#screen2').offset().left - p;
	                $('#screen1').offset({
	                  left: q - 1500 + p
	                });
	              }
	            }
	          } else {
	            p = p + 220;
	            if (Math.abs(p) % 1500 <= 100) {
	              if (Math.abs(p) % 3000 <= 100) {
	                p = p - 220;
	                q = $('#screen1').offset().left - p;
	                $('#screen2').offset({
	                  left: q + 1500 + p
	                });
	              } else {
	                p = p - 220;
	                q = $('#screen2').offset().left - p;
	                $('#screen1').offset({
	                  left: q + 1500 + p
	                });
	              }
	            }
	          }
	        }
	      }).on('mouseup', function() {
	        flag = false;
	      }).on('keydown', function(e) {
	        var keypressed, p, q;
	        keypressed = e.keyCode;
	        p = $(this).offset().left;
	        if (keypressed === 37) {
	          $(this).offset({
	            left: p - 10
	          });
	          p = $(this).offset().left;
	          p = p + 220;
	          if (Math.abs(p) % 1500 === 0) {
	            if (Math.abs(p) % 3000 === 0) {
	              p = p - 220;
	              q = $('#screen1').offset().left - p;
	              $('#screen2').offset({
	                left: q + 1500 + p
	              });
	            } else {
	              p = p - 220;
	              q = $('#screen2').offset().left - p;
	              $('#screen1').offset({
	                left: q + 1500 + p
	              });
	            }
	          }
	        } else if (keypressed === 39) {
	          $(this).offset({
	            left: p + 10
	          });
	          if (Math.abs(p) % 1500 === 0) {
	            if (Math.abs(p) % 3000 === 0) {
	              q = $('#screen1').offset().left - p;
	              $('#screen2').offset({
	                left: q - 1500 + p
	              });
	            } else {
	              q = $('#screen2').offset().left - p;
	              $('#screen1').offset({
	                left: q - 1500 + p
	              });
	            }
	          }
	        }
	      }).on('click', function(e) {
	        $(this).focus();
	      });
	    };
	  })(jQuery);

	  container = $("#" + DirectPano.pano_div_id);

	  container.css("overflow", "hidden");

	  container.css({
	    'width': '600px',
	    'height': '550px'
	  });

	  div = $("<div></div>", {
	    id: "drag",
	    tabindex: 0
	  });

	  div.width(window.innerWidth).height(window.innerHeight);

	  div1 = $("<div></div>", {
	    id: "screen1"
	  });

	  div2 = $("<div></div>", {
	    id: "screen2"
	  });

	  div1.css({
	    "width": "1500px",
	    "height": "620px"
	  });

	  div2.css({
	    "width": "1500px",
	    "height": "620px"
	  });

	  div.append(div1);

	  div.append(div2);

	  container.append(div);

	  root.pano = new root.Pano(0);

	  root.pano.load_pano().done(function() {
	    $(document).ready(function() {
	      $("#image-screen1_0").fadeTo(3000, 1);
	      $("#image-screen2_0").fadeTo(3000, 1, function() {
	        root.hotspot = new root.Hotspot(0);
	        root.hotspot.add_hotspots();
	        root.annotation = new root.Annotation(0);
	        root.annotation.add_annotations();
	      });
	    });
	  });

	  div2.offset({
	    top: 0,
	    left: -1500
	  });

	  div.dragabble();

	}).call(this);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var Transition, pano, root;

	  root = __webpack_require__(2);

	  pano = void 0;

	  Transition = (function() {
	    function Transition(old_id, new_id) {
	      var change_opacity;
	      this.old_id = old_id;
	      this.new_id = new_id;
	      root.hotspot.remove_hotspots();
	      root.hotspot = null;
	      root.annotation.remove_annotations();
	      root.annotation = null;
	      pano = new root.Pano(new_id);
	      change_opacity = this.change_opacity.bind(this);
	      pano.load_pano().done(function() {
	        change_opacity();
	      });
	      return;
	    }

	    Transition.prototype.change_opacity = function() {
	      var new_id, time;
	      time = 3000;
	      new_id = this.new_id;
	      $("#image-screen1_" + this.old_id).fadeTo(time, 0);
	      $("#image-screen2_" + this.old_id).fadeTo(time, 0);
	      $("#image-screen1_" + this.new_id).fadeTo(time, 1);
	      $("#image-screen2_" + this.new_id).fadeTo(time, 1, function() {
	        root.pano.remove_pano();
	        root.pano = null;
	        root.pano = pano;
	        root.hotspot = new root.Hotspot(new_id);
	        root.hotspot.add_hotspots();
	        root.annotation = new root.Annotation(new_id);
	        root.annotation.add_annotations();
	      });
	    };

	    return Transition;

	  })();

	  root.Transition = Transition;

	  module.exports = root;

	}).call(this);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var Annotation, root;

	  root = __webpack_require__(3);

	  root.annotation_angles = [[], [[250, 0, "Fridge", "Samsung <br>400 L "], [56, -20, "Washing Machine", "LG <br>5.5 Kg"]], [], [[0, 18, "AC", "Samsung <br>1 Ton"], [75, 14, "AC", "Samsung <br>1 Ton"], [0, 0, "TV", "Phillips (LCD) <br> 32 inch"]], [[82, 0, "TV", "Phillips (LCD) <br> 32 inch"]], [], [[260, -16, "Bed", "Queen Size <br>6' x 5'"], [278, 14, "AC", "Samsung <br>1 Ton"], [197, 0, "Almirah", "6' x 3' x 1'"]], [[335, 0, "Almirah", "6' x 3' x 1'"]], [], [], [], [], [], [[95, -16, "Bed", "Queen Size <br>6' x 5'"], [82, 14, "AC", "Samsung <br>1 Ton"]], [], [], [[183, 0, "Almirah", "6' x 3' x 1'"]], [], [[26, 14, "AC", "Samsung <br>1 Ton"]], [], [[133, -20, "Bed", "Single <br>6' x 4'"], [200, 0, "Almirah", "6' x 2' x 1'"]]];

	  Annotation = (function() {
	    function Annotation(pano_id) {
	      this.pano_id = pano_id;
	      this.length = void 0;
	    }

	    Annotation.prototype.add_annotation = function(annotation_id, top, left) {
	      var anno_div1, anno_div2, anno_id, div1, div2, pano_id;
	      div1 = $("#screen1");
	      div2 = $("#screen2");
	      pano_id = this.pano_id;
	      anno_id = annotation_id;
	      annotation_id = "annotation_1_" + anno_id;
	      anno_div1 = $("<div></div>", {
	        id: annotation_id
	      });
	      anno_div1.prepend("<img class='annotation' height='40px' width='40px' src='../test/images/info.png'></img> <div class='hotspot-title'> <div class='hotspot-text'>" + root.annotation_angles[pano_id][anno_id][2] + "</div> </div> <div class='info-hotspot'>" + root.annotation_angles[pano_id][anno_id][3] + "</div>");
	      anno_div1.on('click', function() {
	        if (anno_div1.find('.info-hotspot').css('visibility') === 'visible') {
	          anno_div1.find('.info-hotspot').css('visibility', 'hidden');
	        } else {
	          anno_div1.find('.info-hotspot').css('visibility', 'visible');
	        }
	      });
	      anno_div1.css('display', 'inline');
	      anno_div1.css('position', 'absolute');
	      anno_div1.css('left', left);
	      anno_div1.css('top', top);
	      anno_div1.css({
	        'font-family': "'Helvetica Neue', Helvetica, Arial, sans-serif"
	      });
	      anno_div1.css('font-size', '16px');
	      div1.append(anno_div1);
	      annotation_id = "annotation_2_" + anno_id;
	      anno_div2 = $("<div></div>", {
	        id: annotation_id
	      });
	      anno_div2.prepend("<img class='annotation' height='40px' width='40px' src='../test/images/info.png'></img> <div class='hotspot-title'> <div class='hotspot-text'>" + root.annotation_angles[pano_id][anno_id][2] + "</div> </div> <div class='info-hotspot'>" + root.annotation_angles[pano_id][anno_id][3] + "</div>");
	      anno_div2.on('click', function() {
	        if (anno_div2.find('.info-hotspot').css('visibility') === 'visible') {
	          anno_div2.find('.info-hotspot').css('visibility', 'hidden');
	        } else {
	          anno_div2.find('.info-hotspot').css('visibility', 'visible');
	        }
	      });
	      anno_div2.css('display', 'inline');
	      anno_div2.css('position', 'absolute');
	      anno_div2.css('left', left);
	      anno_div2.css('top', top);
	      anno_div2.css({
	        'font-family': "'Helvetica Neue', Helvetica, Arial, sans-serif"
	      });
	      anno_div2.css('font-size', '16px');
	      div2.append(anno_div2);
	      console.log($("#annotation_id_1_" + anno_id));
	      console.log($("#annotation_id_2_" + anno_id));
	    };

	    Annotation.prototype.add_annotations = function() {
	      var angle, i, left, pano_id, top;
	      pano_id = this.pano_id;
	      this.length = root.annotation_angles[pano_id].length;
	      i = 0;
	      while (i < this.length) {
	        top = "400px";
	        angle = (root.annotation_angles[pano_id][i][0] + 80) % 360;
	        left = ((angle / 360) * 1500) + 'px';
	        this.add_annotation(i, top, left);
	        i++;
	      }
	    };

	    Annotation.prototype.remove_annotations = function() {
	      var i;
	      i = 0;
	      while (i < this.length) {
	        $("#annotation_1_" + i).off();
	        $("#annotation_2_" + i).off();
	        $("#annotation_1_" + i).remove();
	        $("#annotation_2_" + i).remove();
	        i++;
	      }
	    };

	    return Annotation;

	  })();

	  root.Annotation = Annotation;

	  module.exports = root;

	}).call(this);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var Hotspot, root;

	  root = __webpack_require__(4);

	  root.hotspot_angles = [[[1, 70, 110], [2, 340, 90]], [[0, 225, 110]], [[0, 140, 90], [3, 0, 90]], [[2, 190, 90], [4, 330, 90], [5, 53, 140]], [[3, 135, 90], [9, 332, 90]], [[3, 222, 140], [6, 315, 55], [11, 47, 50]], [[5, 120, 55], [7, 210, 50], [8, 295, 130]], [[6, 25, 50]], [[6, 123, 130], [9, 220, 90]], [[8, 70, 50], [4, 177, 100]], [[11, 340, 45]], [[12, 320, 60], [5, 230, 45], [10, 170, 45]], [[11, 135, 60], [13, 45, 50], [18, 313, 53]], [[12, 245, 50], [14, 130, 75], [16, 63, 100]], [[13, 305, 75], [15, 145, 50]], [[14, 305, 50]], [[13, 220, 100], [17, 75, 50]], [[16, 255, 55]], [[12, 130, 53], [19, 328, 130], [20, 10, 110]], [[18, 135, 130]], [[18, 182, 90], [21, 40, 80]], [[20, 215, 85]]];

	  root.hotspot_text = ["Exit", "Kitchen", "Hall Entrance", "Middle of Hall", "Sofa", "Somewhere", "1st Room Entrance", "Almirah", "Balcony 2", "Balcony 1"];

	  Hotspot = (function() {
	    function Hotspot(pano_id) {
	      this.pano_id = pano_id;
	    }

	    Hotspot.prototype.add_hotspot = function(left, top, i, div1, div2) {
	      var hotspot, hotspot_annotation1, hotspot_annotation2, hotspot_div1, hotspot_div2, new_id, old_id;
	      old_id = this.pano_id;
	      new_id = root.hotspot_angles[old_id][i][0];
	      hotspot_div1 = $("<div></div>", {
	        id: "hotspot_" + i + "_0",
	        "class": "hotspot"
	      });
	      hotspot = $("<img  src='../test/images/logo.png' id='hotspot_" + i + "_0'/>");
	      hotspot.css('height', '50');
	      hotspot.css('width', '50');
	      hotspot_annotation1 = $("<p>" + root.hotspot_text[new_id] + "</p>");
	      hotspot_annotation1.css('color', 'Yellow');
	      hotspot_div1.prepend(hotspot);
	      hotspot_div1.append(hotspot_annotation1);
	      hotspot_div1.on('click', function() {
	        var transition;
	        transition = new root.Transition(old_id, new_id);
	      });
	      div1.append(hotspot_div1);
	      hotspot_div2 = $("<div></div>", {
	        id: "hotspot_" + i + "_1",
	        "class": "hotspot"
	      });
	      hotspot = $("<img  src='../test/images/logo.png' id='hotspot_" + i + "_1'/>");
	      hotspot.css('height', '50');
	      hotspot.css('width', '50');
	      hotspot_annotation2 = $("<p>" + root.hotspot_text[new_id] + "</p>");
	      hotspot_annotation2.css('color', 'Yellow');
	      hotspot_div2.append(hotspot);
	      hotspot_div2.append(hotspot_annotation2);
	      hotspot_div2.on('click', function() {
	        var transition;
	        transition = new root.Transition(old_id, new_id);
	      });
	      div2.append(hotspot_div2);
	      $("#hotspot_" + i + "_0").css('position', 'absolute');
	      $("#hotspot_" + i + "_0").css('left', left);
	      $("#hotspot_" + i + "_0").css('top', top);
	      $("#hotspot_" + i + "_1").css('position', 'absolute');
	      $("#hotspot_" + i + "_1").css('left', left);
	      $("#hotspot_" + i + "_1").css('top', top);
	    };

	    Hotspot.prototype.add_hotspots = function() {
	      var angle, i, img1, img2, left, num_hotspots, pano_id, top;
	      console.log("hjkl");
	      pano_id = this.pano_id;
	      num_hotspots = root.hotspot_angles[pano_id].length;
	      img1 = $("#screen1");
	      img2 = $("#screen2");
	      i = 0;
	      while (i < num_hotspots) {
	        angle = (root.hotspot_angles[pano_id][i][1] + 80) % 360;
	        left = ((angle / 360) * 1500) + 'px';
	        top = "400px";
	        this.add_hotspot(left, top, i, img1, img2);
	        i++;
	      }
	    };

	    Hotspot.prototype.remove_hotspots = function() {
	      var i, num_hotspots, pano_id;
	      $(".hotspot").remove();
	      i = 0;
	      pano_id = this.pano_id;
	      num_hotspots = root.hotspot_angles[pano_id].length;
	      while (i < num_hotspots) {
	        $("#hotspot_" + i + "_0").off();
	        $("#hotspot_" + i + "_1").off();
	        i++;
	      }
	    };

	    return Hotspot;

	  })();

	  root.Hotspot = Hotspot;

	  module.exports = root;

	}).call(this);


/***/ },
/* 4 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.9.3
	(function() {
	  var Pano, root;

	  root = {};

	  Pano = (function() {
	    function Pano(pano_id) {
	      this.pano_id = pano_id;
	    }

	    Pano.prototype.load_pano = function() {
	      var dfrd, div1, div2, img1, img2, pano_id, path;
	      pano_id = this.pano_id;
	      img1 = $('<img/>', {
	        id: "image-screen1_" + pano_id
	      });
	      img2 = $('<img/>', {
	        id: "image-screen2_" + pano_id
	      });
	      img1.css({
	        "width": "1500px",
	        "height": "620px"
	      });
	      img2.css({
	        "width": "1500px",
	        "height": "620px"
	      });
	      img1.css("position", "absolute");
	      img1.css("left", "0px");
	      img1.css("top", "0px");
	      img1.css("opacity", "0");
	      img2.css("position", "absolute");
	      img2.css("left", "0px");
	      img2.css("top", "0px");
	      img2.css("opacity", "0");
	      path = "../test/images/" + (pano_id + 1) + ".jpg";
	      img1.attr("src", path);
	      img2.attr("src", path);
	      div1 = $("#screen1");
	      div1.append(img1);
	      div2 = $("#screen2");
	      div2.append(img2);
	      dfrd = [];
	      dfrd[0] = $.Deferred();
	      dfrd[1] = $.Deferred();
	      img1.on("load", function() {
	        img1.off();
	        dfrd[0].resolve();
	      });
	      img2.on("load", function() {
	        img2.off();
	        dfrd[1].resolve();
	      });
	      return $.when(dfrd[0], dfrd[1]).done(function() {}).promise();
	    };

	    Pano.prototype.remove_pano = function() {
	      $("#image-screen1_" + this.pano_id).remove();
	      return $("#image-screen2_" + this.pano_id).remove();
	    };

	    return Pano;

	  })();

	  root.Pano = Pano;

	  module.exports = root;

	}).call(this);


/***/ }
/******/ ]);